


import java_cup.runtime.*;
import java.util.*;
import java.io.*;


parser code 	{:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};

// Terminal tokens
terminal INT, DOUBLE, ID;
terminal PRINT, IF, WHILE, ELSE;
terminal RO, RC, BO, BC, SC, CM, SO, S;
terminal PLUS, MINUS, STAR, DIV;
terminal MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE;
terminal UMINUS;

// Non terminal tokens
non terminal prog, stmt_list, stmt, if, while, assignment, print;
non terminal exp;
non terminal mineq, mageq;

non terminal decl_list, decl, var_list, var;
non terminal type, array;
non terminal if_condition, while_condition;
non terminal id;

// Precedences and associativities
// lower precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left UMINUS;
// higher precedences


//////////////////////////////////////
// Grammar start
//////////////////////////////////////

start with prog;


prog ::= decl_list stmt_list {: System.out.println("Programm correctly recognized"); :}
;


//////////////////////////////////////
// Declarations
//////////////////////////////////////

decl_list ::= decl_list decl | 
;

decl ::= type var_list S
;

type ::= INT_TYPE | DOUBLE_TYPE
;

var_list ::= var | var_list CM var
;

var ::= ID array
;

array ::= | array SO INT SC
;


//////////////////////////////////////
// Instructions
//////////////////////////////////////

stmt_list ::= stmt_list stmt | stmt 
;


stmt ::= if | while | assignment | print | BO stmt_list BC
;

// Assignment instruction
assignment ::= id S | id EQ exp S 
;

// PRINT instruction
print ::= PRINT id S
;


// IF instruction
if ::= IF if_condition stmt ELSE stmt
     | IF if_condition stmt
;

if_condition ::= RO exp RC
;


// WHILE instruction
while ::= WHILE while_condition stmt
;

while_condition ::= RO exp RC
;


// Expressions
exp ::= 
    /* Espressioni logiche */
    exp AND exp
    | exp OR exp
    | NOT exp

    /* Espressioni di confronto */
    | exp EQ EQ exp
    | exp MIN exp
    | exp MAJ exp
    | exp mineq exp
    | exp mageq exp

    /* Espressioni aritmetiche */
    | exp PLUS exp
    | exp MINUS exp
    | exp STAR exp
    | exp DIV exp
    | RO exp RC
    | id
    | INT
    | DOUBLE
    | MINUS INT %prec UMINUS
    | MINUS DOUBLE %prec UMINUS
;


mineq ::= MIN_EQ | EQ_MIN;
mageq ::= MAJ_EQ | EQ_MAJ;


id ::= ID
      |ID SO INT SC
      |ID SO ID SC
;
