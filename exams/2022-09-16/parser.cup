/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
    symbol_table = new Hashtable<String,Hashtable<String,Double>>();
:};

parser code 	{:
    public static Hashtable<String,Hashtable<String,Double>> symbol_table;
    public static Integer totalH=0;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};




//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal S, C, TO,KM,M,KCAL,DD, SEP; 
terminal ELEVATIONKW, ROUTEKW; 
terminal TOK1,TOK2,TOK3;

non terminal prog ;
non terminal HEADER ;
non terminal TOKL, TOK12EL, TOK12L;

terminal String STRING;
terminal Double DOUBLE;
terminal Integer INTEGER;
non terminal DEST;
non terminal DISTANCE,DISTANCEL;
non terminal Hashtable<String,Double>  DESTL;


non terminal COMMANDL, COMMAND;
non terminal ROUTE, ELEVATION;
non terminal Integer PLACEL;
non terminal ROUTEL, PAIR;
non terminal Double PAIRL;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= HEADER SEP DISTANCEL SEP COMMANDL {:System.out.println("syntax correct, GJ!");:}
;
HEADER ::= TOKL
;
TOKL ::= TOK12EL 
        | TOK12EL TOK3 S TOK12EL
        | TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL
;
TOK12EL ::= | TOK12L
;
TOK12L ::= TOK1 S
        |  TOK2 S
        |  TOK12L TOK1 S
        |  TOK12L TOK2 S
;

DISTANCEL ::= DISTANCEL DISTANCE 
            | DISTANCE
;
DISTANCE ::= STRING:x DESTL:innerMap S {: symbol_table.put(x,innerMap); :}
;

DESTL::= TO STRING:dest DOUBLE:dist KM  
{: 
    Hashtable<String,Double> map = new Hashtable<String,Double>();
    map.put(dest,dist);
    RESULT = map;
:}
        | DESTL:map C TO STRING:dest DOUBLE:dist KM
{: 
    map.put(dest,dist);
    RESULT = map;
:}
;

DEST ::= TO STRING:dest DOUBLE:dist KM 
;

COMMANDL ::= COMMAND COMMAND COMMAND COMMAND 
        | COMMANDL COMMAND COMMAND
;

COMMAND ::= ROUTE 
        | ELEVATION
;

ELEVATION ::= ELEVATIONKW PLACEL:x S {: System.out.println("ELEVATION: "+totalH); totalH=0; :}
{:

:}
;
PLACEL ::= STRING INTEGER:x M
        {:
            RESULT = x;
        :}
        | PLACEL:prevH C STRING INTEGER:x M
        {:
            Integer diff;
            //System.out.println("Adding diff: "+x + " - " + prevH);
            diff=x-prevH;
            totalH+=diff;
            RESULT = x;
        :}
;

ROUTE ::= ROUTEKW INTEGER:x KCAL DD PAIRL:sum S
        | ROUTEKW INTEGER:x DD PAIRL:sum S
;
PAIRL ::= STRING:src STRING:dest DOUBLE:mod
{:
    Hashtable<String,Double> innerMap = symbol_table.get(src);
    Double dist = innerMap.get(dest);
    System.out.println("stack(-4): "+parser.stack(-4));
    //Integer kcal = (Integer) parser.stack(-4);
    RESULT = dist*mod; 
:}
        | PAIRL:sum C STRING:src STRING:dest DOUBLE:mod
{:
    Hashtable<String,Double> innerMap = symbol_table.get(src);
    Double dist = innerMap.get(dest);
    System.out.println("stack(-7): "+parser.stack(-7));
    //Integer kcal = (Integer) parser.stack(-7);
    
    RESULT = dist*mod;
:}
;
