/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
    symbol_table = new Hashtable<String,Double>();
:};

parser code 	{:
    public static Hashtable<String,Double> symbol_table;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};




//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal S, C, TO,KM,M,KCAL,DD, SEP; 
terminal ELEVATIONKW, ROUTEKW; 
terminal TOK1,TOK2,TOK3;

non terminal prog ;
non terminal HEADER ;
non terminal TOKL, TOK12EL, TOK12L;

terminal String STRING;
terminal Double DOUBLE;
terminal Integer INTEGER;
non terminal DEST, DESTL;
non terminal DISTANCE, DISTANCEL;


non terminal COMMANDL, COMMAND;
non terminal ROUTE, ELEVATION;
non terminal PLACEL, PLACE;
non terminal ROUTEL, PAIRL, PAIR;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= HEADER SEP DISTANCEL SEP COMMANDL {:System.out.println("syntax correct, GJ!");:}
;
HEADER ::= TOKL
;
TOKL ::= TOK12EL 
        | TOK12EL TOK3 S TOK12EL
        | TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL TOK3 S TOK12EL
;
TOK12EL ::= | TOK12L
;
TOK12L ::= TOK1 S
        |  TOK2 S
        |  TOK12L TOK1 S
        |  TOK12L TOK2 S
;

DISTANCEL ::= DISTANCEL DISTANCE 
            | DISTANCE
;
DISTANCE ::= STRING:x DESTL S
;

DESTL::= DEST 
        | DESTL C DEST 
;

DEST ::= TO STRING:dest DOUBLE:dist KM 
;

COMMANDL ::= COMMAND COMMAND COMMAND COMMAND 
        | COMMANDL COMMAND COMMAND
;

COMMAND ::= ROUTE 
        | ELEVATION
;

ELEVATION ::= ELEVATIONKW PLACEL S
;
PLACEL ::= PLACE
        | PLACEL C PLACE
;

PLACE ::= STRING INTEGER M
;

ROUTE ::= ROUTEKW INTEGER KCAL DD PAIRL S
        | ROUTEKW INTEGER DD PAIRL S
;
PAIRL ::= PAIR
        | PAIRL C PAIR
;

PAIR ::= STRING STRING DOUBLE
;