/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
    symbol_table = new Hashtable<String,Hashtable<String,Double>>();
    maxPrice = Double.MIN_VALUE;
    minPrice = Double.MAX_VALUE;
    minFood = "";
    maxFood = "";
:};

parser code 	{:
    public static Hashtable<String,Hashtable<String,Double>> symbol_table;
    public Double minPrice;
    public Double maxPrice;
    public String minFood;
    public String maxFood;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal S, SEP, DD, SO, SC, C, D;
terminal Double DOUBLE, DOUBLE2;
terminal Integer INT;
terminal String STRING;

non terminal prog ;
non terminal String IDL ; 

//HEADER
non terminal HEADER, TOK2L, TOK2EL, TOK2L2;
terminal TOK1,TOK2;

// FOOD SECTION
non terminal FOODSECTION;
non terminal FOODCATEL, FOODCATL, FOODCAT;
non terminal Hashtable<String,Double> FOODL;
terminal EUROKG;

// RECIPES SECTION
terminal KG;
non terminal RECIPESSECTION;

non terminal RECIPESL, RECIPE;
non terminal Double INGREDIENTL, INGREDIENT;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= HEADER SEP FOODSECTION SEP RECIPESSECTION
;



HEADER ::=                  TOK1 S  TOK2 S  TOK2L 
        |   TOK2 S  TOK2L   TOK1 S
        |   TOK2 S          TOK1 S  TOK2 S
        |   TOK2 S  TOK2L   TOK1 S  TOK2 S  TOK2L
        |   TOK2 S  TOK2L   TOK1 S  TOK2 S
        |   TOK2 S          TOK1 S  TOK2 S  TOK2L                   
; 

TOK2L ::= TOK2 S
        | TOK2L TOK2 S
;

FOODSECTION ::= FOODCATEL 
{:
    if(minFood.compareTo("") != 0) //handle the case of empty list or no name food 
        System.out.println("Less expensive: "+minFood+" "+String.format("%.2f",minPrice)+" EURO/kg");
    
    if(maxFood.compareTo("") != 0) //handle the case of empty list or no name food
        System.out.println("Most expensive: "+maxFood+" "+String.format("%.2f",maxPrice)+" EURO/kg");
    if(maxFood.compareTo("") != 0 && minFood.compareTo("") != 0)
    System.out.println("----");
:}
;
FOODCATEL ::= //empty 
            | FOODCATL
;
FOODCATL ::= FOODCAT FOODCAT
            | FOODCATL FOODCAT FOODCAT
;

FOODCAT ::= STRING:category DD SO FOODL:innerMap SC S
{:
    symbol_table.put(category,innerMap);
:}
;
                                       
FOODL ::= STRING:name DD DOUBLE:pricekg EUROKG
{:
    Hashtable<String,Double> innerMap = new Hashtable();
    innerMap.put(name,pricekg);
    if(minPrice > pricekg){
        minPrice = pricekg;
        minFood = name;
    }
    if(maxPrice < pricekg){
        maxPrice = pricekg;
        maxFood = name;
    } 
    RESULT = innerMap;
:}
        | FOODL:innerMap C STRING:name DD DOUBLE:pricekg EUROKG
{:
    innerMap.put(name,pricekg);
    if(minPrice > pricekg){
        minPrice = pricekg;
        minFood = name;
    }
    if(maxPrice < pricekg){
        maxPrice = pricekg;
        maxFood = name;
    }
    RESULT = innerMap;
:}
;
//RECIPES RULES:

RECIPESSECTION ::= 
    | RECIPESL
;
RECIPESL ::= RECIPE 
            | RECIPESL RECIPE
;
RECIPE  ::= INT:num STRING:rname {:RESULT = (Integer) parser.stack(-1);:} DD INGREDIENTL:cost S {:System.out.println("Tot: "+String.format("%.2f",cost)+" EURO");:}
        |   INT:num STRING:rname INGREDIENTL:cost S {:System.out.println("Tot: "+String.format("%.2f",cost)+" EURO");:}
;
INGREDIENTL ::= STRING:cat D STRING:ing DOUBLE2:qnt KG
            {:
                Integer num = (Integer) parser.stack(-6);
                Double priceKg = symbol_table.get(cat).get(ing);
                Double priceForThis = priceKg*qnt*num;
                System.out.print(ing+" ");
                //System.out.print(priceKg+"*"+qnt+"*"+num+" = ");
                System.out.println(String.format("%.2f",priceForThis)+" EURO");
                RESULT = priceForThis;
            :}
            | INGREDIENTL:sum C STRING:cat D STRING:ing DOUBLE2:qnt KG
            {:
                Integer num = (Integer) parser.stack(-8);
                Double priceKg = symbol_table.get(cat).get(ing);
                Double priceForThis = priceKg*qnt*num;
                System.out.print(ing+" ");
                //System.out.print(priceKg+"*"+qnt+"*"+num+" = ");
                System.out.println(String.format("%.2f",priceForThis)+" EURO");
                RESULT = sum+priceForThis;
            :}
;
