import java_cup.runtime.*;
import java.util.HashMap;
import java.lang.Math;

init with {:
    st = new HashMap();

    System.out.println("Achieved scores.\n");
:};
parser code
{:
	public static HashMap st;
	public void syntax_error(Symbol simbolo_attuale)
	{
		StringBuffer m = new StringBuffer("Errore ");
		if (cur_token.left != -1)
		{
			m.append("in linea " + (simbolo_attuale.left+1));
			m.append(", colonna " + (simbolo_attuale.right+1));
		}
	m.append (", simbolo: " + (simbolo_attuale));
	m.append (": Errore di sintassi");
	
	System.err.println(m);
	}
	public Object stack(int position)
	{
		return (((Symbol) stack.elementAt(tos+position)).value);
	}
:};

terminal SH,SYM,COLON,COMA,OP,CP,CODE,ID,OB,CB,ARROW,PLUS,MINUS,STAR,DIV,DATE;
terminal String NAME;
terminal Integer INTP;


non terminal prog,prog_ok,headerl,ltask,lobj,hc,hd,obj,task,tas ;
non terminal HashMap attr,lattr;
non terminal Integer lequ,exp;

precedence left PLUS, MINUS;
precedence left STAR, DIV;

start with prog;

prog         ::= prog_ok {: System.out.print("Syntax Correct\n"); :};
prog_ok      ::= headerl P states P transition ;
headerl      ::= CODE hc | HOUR hd | IP hd|CODE CODE CODE hf ;
hc           ::= HOUR hc |IP hc |HOUR| IP; 
hd           ::= HOUR hd | CODE hc|IP hd | CODE|HOUR|IP ;
hf           ::= CODE hf | CODE ;
states       ::= lst lst lst |states lst lst ;
lst         ::= STATE WORD OB lvar CB ;
lvar         ::= WORD EQ INTP|lvar SYM WORD EQ INTP  ;
transition   ::= START WORD SYM lcom ;
lcom         ::= com |lcom com | ;
com          ::= printcm  | ifcm ;
printcm      ::= PRINT SYM ;
ifcm         ::=IF STATE WORD SH exp THEN STATE WORD SYM |IF STATE WORD SH exp THEN STATE WORD SYM ELSE STATE WORD SYM  
exp          ::= exp:w AND exp:v{:if(w==1 && v==1) RESULT=1.0; else RESULT=0.0;:} 
                 | exp:w OR exp:v 
                 | exp  EQEQ exp ;
                 | WORD DOT WORD {:HashMap hash = (HashMap)parser.st.get(n); Integer d = (Integer)hash.get(m); RESULT=d;:}
                 | INTP:i {:RESULT=i;:};



















