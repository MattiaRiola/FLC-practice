import java.io.*;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

init with {:
    symbol_table = new HashMap<String, HashMap<String, Integer>>();
:};

parser code {:
    public HashMap<String, HashMap<String, Integer>> symbol_table;

    public static void main(String argv[]){
	try {
        /* Scanner instantiation */
        scanner l = new scanner(new FileReader(argv[0]));
        /* Parser instantiation */
        parser p = new parser(l);
        /* Run the parser */
        Object result = p.parse().value;      
      } catch (NullPointerException e) {
        e.printStackTrace();
              System.err.println("Syntax error");
      } catch (FileNotFoundException e){
              System.err.println("Errore opening file " + argv[0]);
      } catch (Exception e){
              e.printStackTrace();
      }
    }
  
    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1) {
                int line = (((Symbol)info).left) + 1;
                int column = (((Symbol)info).right) + 1;
                System.err.print(" (row " + line + ", column " + column + "): " + message);
            } else System.err.print(": " + message);
        }
        else System.err.print(": " + message);
    }
    public void syntax_error(Symbol cur_token) { }

    // Return actual symbol
    /* It returns the object of type Symbol in the top of the parser stack.
    */
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};

// Terminal tokens
terminal SEP;
terminal T1, T2, T3;
terminal SET, POS, FUEL;
terminal INC, DEC;
terminal PLUS, MINUS;
terminal DECL, IF, ELSE;
terminal AND, OR, NOT;
terminal MV;
terminal MAX, MIN;
terminal RO, RC, BO, BC;
terminal PT, EQ, CM, S, C;
terminal String ID;
terminal String INT;

// Non Terminal tokens
non terminal file;
non terminal header, nt3, t31, t32;
non terminal Integer sint;
non terminal car;
non terminal Integer[] sets;
non terminal commands, qcommands, dcommands, command;
non terminal HashMap declare, attributes, attribute;
non terminal if, else;
non terminal Integer vnameattr;
non terminal Boolean boolean;
non terminal mvlist, mv;
non terminal Integer fuel_op, minmax;
non terminal fuel;
non terminal List values;
non terminal Integer value;

// Precedences and associativities
// lower precedences
precedence left AND;
precedence left OR;
precedence left NOT;
// higher precedences

//////////////////////////////////////
// Grammar start
//////////////////////////////////////

start with file;

file ::= header SEP car;

header ::= | T1 header | T2 header | T3 t31;

t31 ::= | T1 t31 | T2 t31 | T3 t32;

t32 ::= | T1 t32 | T2 t32 | T3 nt3;

nt3 ::= | T1 nt3 | T2 nt3;

car ::= SET sets S commands;

sets ::= POS sint:a CM sint:b MINUS FUEL sint:c {:
           RESULT = new Integer[] { a, b, c };
         :} | FUEL sint:a MINUS POS sint:b CM sint:c {:
           RESULT = new Integer[] { b, c, a};
         :} | MINUS POS sint:a CM sint:b {:
           RESULT = new Integer[] { a, b, 0 };
         :} | MINUS FUEL sint:a {:
           RESULT = new Integer[] { 0, 0, a};
         :};

sint ::= INT:a {: RESULT = Integer.parseInt(a); :} |
         PLUS INT:a {: RESULT = Integer.parseInt(a); :} |
         MINUS INT:a {: RESULT = -Integer.parseInt(a); :};

commands ::= qcommands dcommands;

qcommands ::= {: RESULT = parser.stack(-1); :} command
              {: RESULT = parser.stack(-3); :} command
              {: RESULT = parser.stack(-5); :} command
              {: RESULT = parser.stack(-7); :} command;

dcommands ::= | dcommands {: RESULT = parser.stack(-3); :} command
              {: RESULT = parser.stack(-5); :} command;

command ::= declare S | if S | fuel S;

declare ::= DECL BO attributes:a BC ID:b {: parser.symbol_table.put(b, a); :};

attributes ::= attribute:a attributes:b {:
                 RESULT = new HashMap<String, Integer>();
                 RESULT.putAll(a);
                 RESULT.putAll(b);
               :} | attribute:a {: RESULT = a; :};

attribute ::= ID:a EQ sint:b S {:
                RESULT = new HashMap<String, Integer>();
                RESULT.put(a, b);
              :};

if ::= IF boolean:a BO {: 
         Object[] data = new Object[2];
         data[0] = parser.stack(-3); // PosF
         data[1] = a; // Exec
         RESULT = (Object)data;
       :} mvlist BC else;

else ::= | ELSE BO {: 
            Object[] data = (Object[])parser.stack(-4);
            data[1] = (Object)(!(Boolean)data[1]);
            RESULT = data;
         :} mvlist BC;

vnameattr ::= ID:a PT ID:b {: RESULT = parser.symbol_table.get(a).get(b); :};

boolean ::= RO boolean:a RC {: RESULT = a; :} |
            vnameattr:a EQ EQ sint:b {: RESULT = a == b; :} |
            boolean:a AND boolean:b {: RESULT = a && b; :} |
            boolean:a OR boolean:b {: RESULT = a || b; :} |
            NOT boolean:a {: RESULT = !a; :};

mvlist ::= mvlist {: RESULT = parser.stack(-1); :} mv | mv;

mv ::= MV sint:a CM sint:b CM FUEL sint:c S {:
         Object[] data = (Object[])parser.stack(-8);
         if ((Boolean)data[1]) {
           Integer[] pf = (Integer[])data[0];
           pf[0] += a;
           pf[1] += b;
           pf[2] += c;
           System.out.println("X: " + pf[0] + " Y: " + pf[1] + " FUEL: " + pf[2]);
         }
       :};

fuel_op ::= INC {: RESULT = 1; :} | DEC {: RESULT = 0; :};

fuel ::= FUEL fuel_op:a C minmax:b {:
           Integer val = (a == 1) ? b : -b;
           Integer[] pf = (Integer[])parser.stack(-4);
           pf[2] += val;
         :};

minmax ::= MIN RO values:a RC {:
             int min = Integer.MAX_VALUE;
             for (int i = 0; i < a.size(); i++) {
               Integer val = (Integer)a.get(i);
               if (min > val) min = val;
             }
             RESULT = min;
           :} | MAX RO values:a RC {:
             int max = 0;
             for (int i = 0; i < a.size(); i++) {
               Integer val = (Integer)a.get(i);
               if (max < val) max = val;
             }
             RESULT = max;
           :};

values ::= value:a CM values:b {:
             RESULT = new LinkedList<Integer>();
             RESULT.add(a);
             RESULT.addAll(b);
           :} | value:a {:
             RESULT = new LinkedList<Integer>();
             RESULT.add(a);
           :};

value ::= sint:a {: RESULT = a; :} | vnameattr:a {: RESULT = a; :};